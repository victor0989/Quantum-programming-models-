#!/usr/bin/python3

from qutip import *
#This will load all of the user available functions. Often, we also need to import the NumPy and Matplotlib libraries with:
import numpy as np
import matplotlib.pyplot as plt

print(Qobj())
Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra
Qobj data =
[[0.]]
Quantum object: dims = [[1]], [2]],[3]], [[4]] shape = (1, 2, 3, 4), type = bra
Qobj data = [[0]]
print Quantum object: dims = [[8]], [1]], shape = (5, 1), type = ket
Qobj data = [[1.]

# five dimensions array to calculate higher quantum dimensions
a = np.array([1,2,3,4,5]])  

#RANDOM OBJECTS/DIMENSSIONAL DATA-HYPERPLANE 
random = np.random.rand(6, 6)

#RESULTS
Quantum object: dims = [[5]], [5]], shape= (8, 8), type = oper, isherm = False

#Description of the issues found

#States and operators:
#Manually specifying the data for each quantum object is inefficient.
#Even more so when most objects correspond to commonly used types such as the ladder 
#operators of a harmonic oscillator, the Pauli spin operators for a two-level system, 
#or state vectors such as Fock states.

>>> basis(5,3)
 Quantum object: dims = [[5], [1]], shape = (5, 1), type = ket
 Qobj data =
 [[0.]
  [0.]
  [0.]
  [1.]
  [0.]]

 >>> coherent(5,0.5-0.5j)
 Quantum object: dims = [[5], [1]], shape = (5, 1), type = ket
 Qobj data =
 [[ 0.7788017 +0.j        ]
  [ 0.38939142-0.38939142j]
  [ 0.        -0.27545895j]
  [-0.07898617-0.07898617j]
  [-0.04314271+0.j        ]]

#Matrix:
import numpy as np

def matrix(m, dec, wid):
  fmt = "%" + str(wid)+ "." + str(dec) + "f"
  (rows, cols) = np.shape(m)
 for i in xrange(rows):
   for j in xrange(cols):
     print fmt % m[i,j],
   print "" # end of row
 print "" # final newline
# =====

print "\nBegin matrices demo \n"
ma = np.matrix([[1.0, 2.0, 3.0], # 2x3
 [4.0, 5.0, 6.0]])
mb = np.zeros((3, 2), dtype=np.int32) # 3x2
mc = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]) # 2x3
md = np.matrix([[7.0, 8.0, 9.0]]) # 1x3

print "N-dimensional array/matrix mc is "
print mc
print ""
print "Matrix ma is type " + str(type(ma))
print "Matrix mb is type " + str(type(mb))
print "Matrix mc is type " + str(type(mc))
print ""

#Matrix to show higher dimensions
show_matrix(ma, 3, 6)
msum = ma + mc
print "Result of ma + mc = "
print (msum)
print ""
md = np.matrix([[7.0, 8.0, 9.0]])
mx = ma + md
print "Matrix md is "
print md

